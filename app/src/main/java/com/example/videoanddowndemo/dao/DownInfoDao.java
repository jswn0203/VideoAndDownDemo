package com.example.videoanddowndemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.videoanddowndemo.down.DownInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "down_info".
*/
public class DownInfoDao extends AbstractDao<DownInfo, Long> {

    public static final String TABLENAME = "down_info";

    /**
     * Properties of entity DownInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MUserId = new Property(1, String.class, "mUserId", false, "M_USER_ID");
        public final static Property MUrlTag = new Property(2, String.class, "mUrlTag", false, "M_URL_TAG");
        public final static Property FileDir = new Property(3, String.class, "fileDir", false, "FILE_DIR");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FILE_NAME");
        public final static Property MSate = new Property(5, int.class, "mSate", false, "M_SATE");
        public final static Property MTotalSize = new Property(6, long.class, "mTotalSize", false, "M_TOTAL_SIZE");
        public final static Property MCurrentSize = new Property(7, long.class, "mCurrentSize", false, "M_CURRENT_SIZE");
    }


    public DownInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"down_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"M_USER_ID\" TEXT," + // 1: mUserId
                "\"M_URL_TAG\" TEXT," + // 2: mUrlTag
                "\"FILE_DIR\" TEXT," + // 3: fileDir
                "\"FILE_NAME\" TEXT," + // 4: fileName
                "\"M_SATE\" INTEGER NOT NULL ," + // 5: mSate
                "\"M_TOTAL_SIZE\" INTEGER NOT NULL ," + // 6: mTotalSize
                "\"M_CURRENT_SIZE\" INTEGER NOT NULL );"); // 7: mCurrentSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"down_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mUserId = entity.getMUserId();
        if (mUserId != null) {
            stmt.bindString(2, mUserId);
        }
 
        String mUrlTag = entity.getMUrlTag();
        if (mUrlTag != null) {
            stmt.bindString(3, mUrlTag);
        }
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(4, fileDir);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getMSate());
        stmt.bindLong(7, entity.getMTotalSize());
        stmt.bindLong(8, entity.getMCurrentSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mUserId = entity.getMUserId();
        if (mUserId != null) {
            stmt.bindString(2, mUserId);
        }
 
        String mUrlTag = entity.getMUrlTag();
        if (mUrlTag != null) {
            stmt.bindString(3, mUrlTag);
        }
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(4, fileDir);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
        stmt.bindLong(6, entity.getMSate());
        stmt.bindLong(7, entity.getMTotalSize());
        stmt.bindLong(8, entity.getMCurrentSize());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DownInfo readEntity(Cursor cursor, int offset) {
        DownInfo entity = new DownInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mUrlTag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileDir
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.getInt(offset + 5), // mSate
            cursor.getLong(offset + 6), // mTotalSize
            cursor.getLong(offset + 7) // mCurrentSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMUrlTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileDir(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMSate(cursor.getInt(offset + 5));
        entity.setMTotalSize(cursor.getLong(offset + 6));
        entity.setMCurrentSize(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
